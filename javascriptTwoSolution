// 1
const isValid = (s) => {
    const stack = [];                                                    // 文字の記憶場所を作ります
    const pairs = {')':'(','}':'{',']':'['};                             // 括弧を対応させて覚えます
        for (const c of s)                                               // 以下2行の処理を、sの中にある文字全てに順番で行います
        if (Object.values(pairs).includes(c)) stack.push(c);             // sを前から一個ずつ見て、開き括弧なら順番に覚えておきます
        else if (c in pairs && stack.pop() !== pairs[c]) return false;   // 閉じ括弧なら、一番最近に覚えた開き括弧と同種かチェックし、あっていたらそのセットを記憶から消します

                                                                         // 括弧のルールに従った文字列が上記の処理を通った場合、括弧同士が打ち消され、記憶(スタック)が空になっているはずです。
    return !stack.length;                                                // 記憶が空ならば、最初に与えられた文字列はルールに沿っていたものと判定します。逆に何か残っていたら、最初に与えられた文字列はルールに沿っていなかったものと判定します。
};

// 2 正規表現
const isValid2 = (s) => {
  const pairCheck = /\(\)|\[\]|\{\}/g;                                   // 括弧を対応させて覚えます
  while (pairCheck.test(s)) {                                            // 文字列に括弧が入っているかチェックし、それがある限り１行下の処理を繰り返します
    s = s.replace(pairCheck, '');                                        // (){}[]のいずれかの隣り合うペアを見つけた場合、それを文字列から消します。
  }                                                                      // 上記の処理を繰り返し終わった場合、もう隣り合うペアは存在しないはずです
  return s.length === 0;                                                 // 今、文字列が空ならば、最初に与えられた文字列はルールに沿っていたものと判定します。逆に何か残っていたら、最初に与えられた文字列はルールに沿っていなかったものと判定します。
};


let s = '()';
console.log(isValid(s)); // true
s = '({)}'
console.log(isValid(s)); // false
